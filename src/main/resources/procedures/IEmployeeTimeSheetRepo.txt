DELIMITER $$

DROP PROCEDURE IF EXISTS GetDistinctYearsFromTimeSheet $$

CREATE PROCEDURE GetHoursWorkedForEmployeeInProject(
    IN yearParam INT,
    IN monthParam INT,
    IN idEmployeeParam INT,
    IN idProjectParam INT
)
BEGIN
    SELECT ets.hours_worked
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN project p ON fow.id_project = p.id_fin_source
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE (EXTRACT(YEAR FROM ets.year_month_day) = yearParam AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam)
    AND emp.id_employee = idEmployeeParam AND p.id_fin_source = idProjectParam;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetDistinctYearsFromTimeSheet $$

CREATE PROCEDURE GetDistinctYearsFromTimeSheet()
BEGIN
    SELECT DISTINCT EXTRACT(YEAR FROM year_month_day) AS distinct_year FROM employee_time_sheet;
END $$

DELIMITER ;


DELIMITER $$

DROP PROCEDURE IF EXISTS GetHoursWorkedOnSpecificDayForEmployeeProject $$

CREATE PROCEDURE `GetHoursWorkedOnSpecificDayForEmployeeProject`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `dayParam` INT,
    IN `employeeIdParam` INT,
    IN `projectIdParam` INT
)
BEGIN
    SELECT ets.hours_worked
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND EXTRACT(DAY FROM ets.year_month_day) = dayParam
      AND emp.id_employee = employeeIdParam
      AND fow.id_project = projectIdParam;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetSickDaysByDateAndEmployeeAndProject $$

CREATE PROCEDURE `GetSickDaysByDateAndEmployeeAndProject`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `projectIdParam` INT
)
BEGIN
    SELECT COUNT(ets.sick_leave)
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND fow.id_project = projectIdParam
      AND ets.sick_leave IS NOT NULL;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetVacationTimeByDateAndEmployeeAndProject $$

CREATE PROCEDURE `GetVacationTimeByDateAndEmployeeAndProject`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `projectIdParam` INT
)
BEGIN
    SELECT COUNT(ets.id_ord_vacation)
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND fow.id_project = projectIdParam
      AND ets.id_ord_vacation IS NOT NULL;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetHoursWorkedForEmployeeBaseFin $$

CREATE PROCEDURE `GetHoursWorkedForEmployeeBaseFin`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `baseFinIdParam` INT
)
BEGIN
    SELECT ets.hours_worked
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN base_fin b ON fow.id_project = b.id_fin_source
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND b.id_fin_source = baseFinIdParam;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetEmployeeHoursWorkedOnSpecificDay $$

CREATE PROCEDURE `GetEmployeeHoursWorkedOnSpecificDay`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `dayParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT ets.hours_worked
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND EXTRACT(DAY FROM ets.year_month_day) = dayParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_base_fin = finSourceIdParam OR fow.id_project = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam);
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetSickDaysSByDateAndEmployeeAndFinSource $$

CREATE PROCEDURE `GetSickDaysSByDateAndEmployeeAndFinSource`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT COUNT(ets.sick_leave)
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam)
      AND ets.sick_leave IS NOT NULL;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetByYearMonthSickLeaveSForEmployeeFinSource $$

CREATE PROCEDURE `GetByYearMonthSickLeaveSForEmployeeFinSource`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam)
      AND ets.sick_leave = 'S';
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetByYearAndMonthAndSickLeaveSbForEmployeeFinSource $$

CREATE PROCEDURE `GetByYearAndMonthAndSickLeaveSbForEmployeeFinSource`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE (EXTRACT(YEAR FROM ets.year_month_day) = yearParam AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam)
    AND emp.id_employee = employeeIdParam
    AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam)
    AND ets.sick_leave = 'Sb';
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetByYearAndMonthAndMissionEmployeeFinSource $$

CREATE PROCEDURE `GetByYearAndMonthAndMissionEmployeeFinSource`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam)
      AND ets.id_ord_mission IS NOT NULL;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetByYearAndMonthAndOrderVacation $$

CREATE PROCEDURE `GetByYearAndMonthAndOrderVacation`(
    IN `yearParam` INT,
    IN `monthParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND ets.id_ord_vacation IS NOT NULL;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetByYearMonthForEmployeeInFinSource $$

CREATE PROCEDURE `GetByYearMonthForEmployeeInFinSource`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam);
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetByYearAndMonthAndOrderOther $$

CREATE PROCEDURE `GetByYearAndMonthAndOrderOther`(
    IN `yearParam` INT,
    IN `monthParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND ets.id_ord_other IS NOT NULL;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetHoursWorkedForEmployeeInBaseFin $$

CREATE PROCEDURE `GetHoursWorkedForEmployeeInBaseFin`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `baseFinIdParam` INT
)
BEGIN
    SELECT ets.hours_worked
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN base_fin b ON fow.id_base_fin = b.id_fin_source
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND b.id_fin_source = baseFinIdParam;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetHoursWorkedForEmployeeInAcademicWorkLoad $$

CREATE PROCEDURE `GetHoursWorkedForEmployeeInAcademicWorkLoad`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `academicWorkLoadIdParam` INT
)
BEGIN
    SELECT ets.hours_worked
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN academic_work_load awl ON fow.id_ac_work_load = awl.id_fin_source
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND awl.id_fin_source = academicWorkLoadIdParam;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS GetHoursWorkedForEmployeeInIndirectVuas $$

CREATE PROCEDURE `GetHoursWorkedForEmployeeInIndirectVuas`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `indirectVuasIdParam` INT
)
BEGIN
    SELECT ets.hours_worked
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN indirect_vuas i ON fow.id_indirectvuas = i.id_fin_source
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND i.id_fin_source = indirectVuasIdParam;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS `GetByYearAndMonthAndUnjustifAbsenceForEmployeeInFinSource` $$

CREATE PROCEDURE `GetByYearAndMonthAndUnjustifAbsenceForEmployeeInFinSource`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam)
      AND ets.remarks = 'N';
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS `FindByDateAndRemarkRecuperation` $$

CREATE PROCEDURE `FindByDateAndRemarkRecuperation`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT ets.remarks
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam)
      AND ets.remarks = 'BR';
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS `GetWorkedHoursOneEmployeeOnSpecificDate` $$

CREATE PROCEDURE `GetWorkedHoursOneEmployeeOnSpecificDate`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `dayParam` INT,
    IN `employeeIdParam` INT
)
BEGIN
    SELECT ets.hours_worked
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND EXTRACT(DAY FROM ets.year_month_day) = dayParam
      AND emp.id_employee = employeeIdParam;
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS `GetAllByYearMonthDayForEmployeeInFinSource` $$

CREATE PROCEDURE `GetAllByYearMonthDayForEmployeeInFinSource`(
    IN `yearParam` INT,
    IN `monthParam` INT,
    IN `dayParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND EXTRACT(DAY FROM ets.year_month_day) = dayParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam);
END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS `FindByDateAndSickLeaveS` $$

CREATE PROCEDURE `FindByDateAndSickLeaveS`(
    IN `dayParam` INT,
    IN `monthParam` INT,
    IN `yearParam` INT,
    IN `employeeIdParam` INT,
    IN `finSourceIdParam` INT
)
BEGIN
    SELECT *
    FROM employee_time_sheet ets
    JOIN finance_order_work fow ON ets.id_fin_ord_work = fow.id_fin_ord_work
    JOIN order_work ow ON fow.id_ord_work = ow.id_order
    JOIN employee emp ON ow.id_employee = emp.id_employee
    WHERE EXTRACT(DAY FROM ets.year_month_day) = dayParam
      AND EXTRACT(MONTH FROM ets.year_month_day) = monthParam
      AND EXTRACT(YEAR FROM ets.year_month_day) = yearParam
      AND emp.id_employee = employeeIdParam
      AND (fow.id_project = finSourceIdParam OR fow.id_base_fin = finSourceIdParam OR fow.id_ac_work_load = finSourceIdParam OR fow.id_indirectvuas = finSourceIdParam)
      AND ets.sick_leave = 'S';
END $$

DELIMITER ;

